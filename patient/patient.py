import os
from os import listdir
from os.path import isfile, join
import random
import json
from utils import crypt
from utils.crypt import get_rand_str
from utils.config import Config
from utils.file_encoder import encode
from miner.miner_log import MinerLog as Log


class Patient():
	def __init__(self):
		self.data_dir = Config.sample_data_dir
		self.priv, self.pub = crypt.gen_keys()
		self.id = crypt.hash(self.pub)


	def get_data(self):
		self.item = {}
		self.item["patient_id"] = self.id
		self.item["patient_pub_key"] = str(self.pub)

		if Config.patient_data_type == "RAND_STR":
			self.item["data"] = get_rand_str(size=Config.patient_str_len)
		elif Config.patient_data_type == "RAND_FILE":
			self.gen_sample_data()
		else:
			Log.warning("Config.patient_data_type {} not recognised, no data generated by patient".format(Config.patient_data_type))
			self.item["data"] = ""

		h = crypt.hash(json.dumps(self.item, sort_keys=True))
		self.item["hash"] = h
		self.item["signature"] = crypt.sign(self.priv, h)

		return self.item


	def gen_sample_data(self):
		sample_files = [join(self.data_dir,f) for f in listdir(self.data_dir) if isfile(join(self.data_dir, f))]
		fp = sample_files.pop(random.randint(0, len(sample_files)-1))
		self.item["filesize"] = os.path.getsize(fp)
		self.item["filename"] = os.path.basename(fp)
		self.item["data"] = encode(fp)
		